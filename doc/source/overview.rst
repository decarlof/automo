========Overview========Automo creates and/or executes processing operation commands based on the configuration file(default to be ``automo.ini``) and the parameter setting file (default to be ``automo_params.csv``).You can specify the path to both files when running ``automo_process_dir`` and ``automo_create_commands``.Configuration file==================``automo.ini`` contains the settings that define the behavior of Automo as well as the processing procesuresto be taken for different types of tomography data. Below is the content of a sample file (also available in the``macros`` folder):::    [settings]    default_h5_fname	= data.h5    [robos]    tomo_180		= automo_preview, automo_center, automo_search_center, automo_recon    tomo_360        = automo_preview_360, automo_center_360, automo_search_center, automo_recon_360    tomosaic        = automo_tomosaic_create_meta, automo_tomosaic_reorg, automo_tomosaic_preview, automo_tomosaic_center, automo_tomosaic_recon    std             = preview, center, recon    [robos_move]    tomo_180		= new_folder    tomo_360        = new_folder    tomosaic        = existing_folder    std             = new_folder    [robos_rename]    tomo_180		= False    tomo_360        = False    tomosaic        = False    std             = TrueThe ``robos`` section specifies the workflow that Automo should adopt for each of the three types of tomography data(the `std` entry is for the exception case where Automo fails to recognize the data files as any of the three categories):* ``tomo_180``: single field-of-view tomography* ``tomo_360``: off-centered 360-degree tomography* ``tomosaic``: mosaic tomography using the Tomosaic acquisition schemeThe data type is automatically detected according to the naming pattern of the HDF5 files. It is thus necessary to keepa consistent naming style as listed in the table below:+----------------+-----------------------------------------------+| Data type      | Naming pattern                                |+----------------+-----------------------------------------------+| ``tomo_180``   | ``*_180_*.h5`` (must contain ``_180_``)       |+----------------+-----------------------------------------------+| ``tomo_360``   | ``*_360_*.h5`` (must contain ``_360_``)       |+----------------+-----------------------------------------------+| ``tomosaic``   | ``*_y_?_x_?_*.h5`` (indices start from 0)     |+----------------+-----------------------------------------------+Automo will execute commands (for ``tomo_180`` and ``tomo_360``) or create bash command scripts (for ``tomosaic``)following the order at which operations are listed. The name of the operations, such as ``automo_preview``, or``automo_tomosaic_reorg``, must match the name of the processing scripts contained in the ``macros`` directory.When running ``automo_process_dir`` in the folder containing all HDF5 data files collected in a beamtime,the ``robos_move`` section tells Automo whether to move a file into a new directory named exactly after the basenameof the file (``new_folder``) or to move it into an existing folder named after the prefix of the filename(``existing folder``; useful for ``tomosaic``). It is recommended to keep the default settings as shown in thesample file above.The ``robos_rename`` section specifies whether Automo should rename the moved HDF5 file according to the setting in``settings/default_h5_fname``. Keep this setting as ``False`` for ``tomosaic`` unless specifically needed.Parameter file==============``automo_params.csv`` contains the parameter settings for all operations. The parameters of the same operation muststay in the same line with names and values separated by a semicolon (``;``). The file should follow the format of::    operation_name; param_1_name; param_1_value; param_2_name; param_2_value; ...If an optional parameter is not provided in the ``csv`` file, it will use the default value.Please refer to the docstring of an operation script (for example, ``automo_tomosaic_center --help``)to get help on the names and meanings of all its parameters. As in the case of the ``ini`` file, ``operation_name``'smust match operation scripts contained in the ``macros`` folder.