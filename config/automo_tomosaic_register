#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
AuTomo with Tomosaic.
"""

import tomosaic
import glob
import os
import argparse
import sys
import numpy as np
import pickle
import time
try:
    from mpi4py import MPI
except:
    from tomosaic.util.pseudo import pseudo_comm
try:
    sys.path.append(os.getcwd())
    from mosaic_meta import *
except:
    try:
        reader = open(os.path.join('tomosaic_misc', 'meta'), 'rb')
        prefix, file_grid, x_shift, y_shift = pickle.load(reader)
        reader.close()
    except:
        raise IOError('Metadata file not found in current working diretory.')


try:
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    name = MPI.Get_processor_name()
except:
    comm = pseudo_comm()
    rank = 0
    size = 1


def main(arg):

    parser = argparse.ArgumentParser()
    parser.add_argument('--source', help='folder with source data', default='auto')
    parser.add_argument('--method', help='method', default='pc')
    parser.add_argument('--ds', help='downsample level', default=1)
    parser.add_argument('--center_st', help='provide if method is hybrid', default='none')
    parser.add_argument('--center_end', help='provide if method is hybrid', default='none')
    args = parser.parse_args()

    ds = int(args.ds)
    method = args.method
    src_folder = args.source if args.source != 'auto' else 'data_raw_{}x'.format(ds)
    if method == 'hybrid':
        center_search_range = (float(args.center_st), float(args.center_end))

    t0 = time.time()
    shift_grid = tomosaic.start_shift_grid(file_grid, x_shift, y_shift)
    if method == 'pc':
        refined_shift = tomosaic.refine_shift_grid(file_grid, shift_grid, src_folder=src_folder,
                                                   motor_readout=(y_shift, x_shift))
    elif method == 'reslice':
        refined_shift = tomosaic.refine_shift_grid_hybrid(file_grid, shift_grid, src_folder,
                                                          rough_shift=(y_shift, x_shift),
                                                          center_search_range=center_search_range)
    print('Rank {}: total time: {} s.'.format(rank, time.time() - t0))


if __name__ == "__main__":
    main(sys.argv[1:])