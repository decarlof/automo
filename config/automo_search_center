#!/usr/bin/env python

import numpy as np
import dxchange

import argparse
import os
from glob import glob
import sys

import automo.util as util

try:
    import xlearn
    from xlearn.classify import model
except:
    warnings.warn('Cannot import package xlearn.')

def find_center_dnn(tomo, theta, search_range, search_step=1, level=0, outpath='center', pad_length=0, **kwargs):

    rot_start, rot_end = search_range
    write_center(tomo[:, 0:1, :], theta, dpath=outpath,
                 cen_range=[rot_start / pow(2, level), rot_end / pow(2, level),
                            search_step / pow(2, level)],
                 pad_length=pad_length)
    return search_in_folder_dnn(outpath, **kwargs)


def search_in_folder_dnn(dest_folder, window=((600, 600), (1300, 1300)), dim_img=128, seed=1337, batch_size=50):

    patch_size = (dim_img, dim_img)
    nb_classes = 2
    save_intermediate = False
    # number of convolutional filters to use
    nb_filters = 32
    # size of pooling area for max pooling
    nb_pool = 2
    # convolution kernel size
    nb_conv = 3
    nb_evl = 100

    fnames = glob.glob(os.path.join(dest_folder, '*.tiff'))
    fnames = np.sort(fnames)

    mdl = model(dim_img, nb_filters, nb_conv, nb_classes)

    weight_path = os.path.dirname(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))))
    weight_path = os.path.join(weight_path, 'config', 'weight_center.h5')
    print(weight_path)
    mdl.load_weights(weight_path)
    start_time = time.time()
    Y_score = np.zeros((len(fnames)))

    for i in range(len(fnames)):
        print(fnames[i])
        img = dxchange.read_tiff(fnames[i])
        X_evl = np.zeros((nb_evl, dim_img, dim_img))

        for j in range(nb_evl):
            X_evl[j] = xlearn.img_window(img[window[0][0]:window[1][0], window[0][1]:window[1][1]], dim_img, reject_bg=True,
                                  threshold=1.5e-4, reset_random_seed=True, random_seed=j)
        # X_evl = convolve_stack(X_evl, get_gradient_kernel())
        X_evl = xlearn.convolve_stack(X_evl, xlearn.get_gradient_kernel())
        X_evl = xlearn.nor_data(X_evl)
        if save_intermediate:
            dxchange.write_tiff(X_evl, os.path.join('debug', 'x_evl', 'x_evl_{}'.format(i)), dtype='float32',
                                overwrite=True)
        X_evl = X_evl.reshape(X_evl.shape[0], 1, dim_img, dim_img)
        Y_evl = mdl.predict(X_evl, batch_size=batch_size)
        Y_score[i] = sum(np.dot(Y_evl, [0, 1]))

    ind_max = np.argmax(Y_score)
    best_center = float(os.path.splitext(os.path.basename(fnames[ind_max]))[0])
    print('Center search done in {} s. Optimal center is {}.'.format(time.time() - start_time, best_center))

    return best_center

def main(arg):
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--folder_name", help="name of the folder containing center files", default='center')
    parser.add_argument("--method", help="method for center search", default='auto')
    parser.add_argument("--rot_start", help="starting position of center search. Used only for vo", default='auto')
    parser.add_argument("--rot_end", help="ending position of center search. Used only for vo", default='auto')

    args = parser.parse_args()

    folder = args.folder_name
    search_method = args.method

    center_ls = []
    slice_ls = os.listdir(folder)

    for ind, i in enumerate(slice_ls):
        outpath = os.path.join(os.getcwd(), folder, str(i))

        # output center images
        if search_method == 'auto':
            try:
                center_pos = util.minimum_entropy(outpath,
                                                  mask_ratio=0.7,
                                                  ring_removal=False,
                                                  reliability_screening=True)
                print('Entropy finds center {}.'.format(center_pos))
            except:
                print('Switching to CNN...')
                center_pos = util.search_in_folder_dnn(outpath)
            if center_pos is None:
                print('Switching to CNN...')
                center_pos = util.search_in_folder_dnn(outpath)
        elif search_method == 'vo':
            h5file = glob('*.h5')
            fname = h5file[0]
            prj_shape = util.read_data_adaptive(fname, shape_only=True)
            prj, flt, drk = util.read_data_adaptive(fname,
                                                    sino=(int(prj_shape[1] / 2), int(prj_shape[1] / 2) + 1),
                                                    return_theta=False)
            prj = (prj - drk) / (flt - drk)
            prj[np.isnan(prj)] = 0
            rot_start = int(args.rot_start)
            rot_end = int(args.rot_end)
            mid = prj.shape[2] / 2
            smin = (rot_start - mid) * 2
            smax = (rot_end - mid) * 2
            center_pos = util.find_center_vo(prj, smin=smin, smax=smax, step=1)

        center_ls.append(center_pos)
        print('Center for slice: {}'.format(center_pos))
    if len(center_ls) == 1:
        center_pos = center_ls[0]
    else:
        center_pos = np.mean(util.most_neighbor_clustering(center_ls, 5), dtype='float')

    f = open('center_pos_auto.txt', 'w')
    f.write(str(center_pos))
    f.close()

if __name__ == "__main__":
    main(sys.argv[1:])